package com.artifact.lesson13

class ListRunner {

    static void main(String[] args) {

        // создали ArrayList
        def list = [1, 3, 5, 6]
        assert list.getClass() == ArrayList

        // read
        assert list[2] == 5          // получили элемент по индексу 2
        assert list.get(2) == 5      // получили элемент по индексу 2
        assert list[-1] == 6      // получили элемент по индексу 4 == list.get(list.size() - 1)
        assert list[1..3] == [3, 5, 6]      // получили выборку по индексам
        assert list[8] == null      // мы не получим исключение если вылезем за пределы

        // write
        list += 9           // добавили в конец 9
        list << 11 << 13 << 7 << 7    // так можно добавлять сколько угодно элементов в конец
        assert list == [1, 3, 5, 6, 9, 11, 13, 7, 7]

        //delete
        list -= 7           // Удалит из списка все цифры 7
        assert list == [1, 3, 5, 6, 9, 11, 13]
        list -= [1, 3]
        assert list == [5, 6, 9, 11, 13]       // Удалит из списка все цифры 1 и 3
        list *= 3
        list == [5, 6, 9, 11, 13, 5, 6, 9, 11, 13, 5, 6, 9, 11, 13] // умножил лист

        // Добавились методы из Queue
        list.push(999)              // положили в начало 999
        assert list.pop() == 999         // удалит и вернет первый элемент
        assert list.head() == 5         // получим головной элемент и тут это будет 5
        assert list.tail() == [6, 9, 11, 13, 5, 6, 9, 11, 13, 5, 6, 9, 11, 13] // получим все, кроме head
        assert list.last() == 13        // получим последний элемент - 13

        // появились новые методы:
        // flatten() - если внутри были массивы другие, он из откроет
        assert [1, 2, [4, 6, 7], 9].flatten() == [1, 2, 4, 6, 7, 9]

        // reverse - развернет
        assert [1, 2, 3].reverse() == [3, 2, 1]

        // intersect - выберет пересечения (одинаковые элементы)
        assert [1, 2, 3].intersect([2, 3, 7]) == [2, 3]

        // disjoint получим true если пересечений нет и false если есть
        assert [1, 2, 3].disjoint([5, 6, 7])

        // Новые операторы:
        // Множественное присвоение
        def (a, b, c) = [3, 5, 7, 9, 10]
        // мы просто присвоили объектам по индексам переменные
        assert a == 3
        assert b == 5
        assert c == 7

        // спрэд оператор
        // в функцию передали массив аргументов хотя там они отдельные
        func(*[8, 10])
    }

    static def func(def a, def b) {
        println a
        println b
    }
}
